# Name of your application. Used to uniquely configure containers.
service: linebot-demo

# Name of the container image.
image: hellospec/linebot-demo

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: hellospec
  password: 
    - KAMAL_REGISTRY_PASSWORD

env:
  # clear:
    # - DATABASE_URL
    # - REDIS_URL 
  secret:
    - RAILS_MASTER_KEY
    - LINEBOT_DEMO_DATABASE_PASSWORD
    - LINE_MSG_CHANNEL_TOKEN
    - DATABASE_URL
    - REDIS_URL

# Deploy to these servers.
servers:
  web:
    hosts:
      - linode-dashboard-demo
    labels:
      traefik.http.routers.linebot-demo.entrypoints: websecure
      traefik.http.routers.linebot-demo.rule: Host(`dashboard-demo.hellospec.work`)
      traefik.http.routers.linebot-demo.tls.certResolver: letsencrypt

        # traefik.http.routers.linebot-demo.rule: Host(`dashboard-demo.hellospec.work`) || Host(`*.dashboard-demo.hellospec.work`)
        # traefik.http.routers.linebot-demo_secure.entrypoints: websecure
        # traefik.http.routers.linebot-demo_secure.rule: Host(`dashboard-demo.hellospec.work`)
        # traefik.http.routers.linebot-demo_secure.tls: true
        # traefik.http.routers.linebot-demo_secure.tls.certresolver: letsencrypt

    options:
      network: "my-private"

traefik:
  labels:
    traefik.http.routers.linebot-demo.tls: false
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
    network: "my-private"
  args:
    # entryPoints.web.address: ":80"
    # entryPoints.websecure.address: ":443"
      # entryPoints.web.http.redirections.entryPoint.to: websecure
      # entryPoints.web.http.redirections.entryPoint.scheme: https
      # certificatesResolvers.letsencrypt.acme.email: "worrawutp@hellospec.com"
      # certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
      # certificatesResolvers.letsencrypt.acme.httpchallenge: true
      # certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "worrawutp@hellospec.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

accessories:
  db:
    image: postgres:15.5
    host: linode-dashboard-demo
    port: 5432
    env:
      clear:
        POSTGRES_USER: "postgres"
        POSTGRES_DB: "linebot_demo_production"
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
    options:
      network: "my-private"

  redis:
    image: redis:7.0
    host: linode-dashboard-demo
    cmd: "redis-server"
    directories:
      - data:/data
    options:
      network: "my-private"

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
